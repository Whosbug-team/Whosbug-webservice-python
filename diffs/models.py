# -*- coding: utf-8 -*-
from email.policy import default
from statistics import mode
from django.db.models import deletion
from django.contrib.postgres.fields import JSONField

from django.db.models.deletion import CASCADE
from django.db import connection, models
from django.db.transaction import commit


def get_values(obj):
    return dict(
        [(kk, obj.__dict__[kk]) for kk in obj.__dict__.keys() if kk != "_state"]
    )


class Project(models.Model):
    """
    记录每一个Project

    Project:{
        pid: 标识项目唯一性
    }
    Table: sngapm.diffs_projects
    Constraints: id generated by Django
    """

    pid = models.CharField(
        max_length=200, verbose_name="Project ID String", unique=True
    )

    class Meta:
        db_table = 'diffs_projects'


class Release(models.Model):
    """
    记录每个Project下的所有Rlease

    Release:{
        version: 标识版本唯一性
        last_commit_hash: 记录该version最后一次commit_hash
        # project: 外键,隶属于的Project
    }
    Table: sngapm.diffs_releases
    Constraints: 复合主键(version,project)
    """

    version = models.CharField(max_length=200, verbose_name="Release ID String"
                               )
    last_commit_hash = models.CharField(max_length=1000, verbose_name="Release Last Commit's Hash"
                                        )
    project = models.ForeignKey(Project, on_delete=CASCADE)

    class Meta:
        db_table = 'diffs_releases'
        constraints = [
            models.UniqueConstraint(
                fields=["project", "version"], name="Project Contains Releases"
            )
        ]


class Commit(models.Model):
    """
    记录一个Release下的所有Commits

    Commit{
        hash: 标识hash varchar
        time: commit时间 varchar
        author: 提交者 varchar
        email: 提交者邮箱 varchar
        # release: 外键,隶属于的Release
    }
    Table: sngapm.diffs_commits
    Constraints: 复合主键(hash,release)
    """

    hash = models.CharField(max_length=1000, verbose_name="Commit's Hash")
    time = models.CharField(max_length=1000, verbose_name="Commit Time")
    author = models.CharField(max_length=1000, verbose_name="Commit Name")
    email = models.CharField(max_length=1000, verbose_name="Commit Email")
    release = models.ForeignKey(Release, on_delete=CASCADE)

    class Meta:
        db_table = 'diffs_commits'
        constraints = [
            models.UniqueConstraint(
                fields=["hash", "release"], name="Release Contains Commits"
            )
        ]

    @classmethod
    def truncate(cls):
        with connection.cursor() as cursor:
            cursor.execute('TRUNCATE TABLE "{0} CASCADE'.format(cls._meta.db_table))

class Object(models.Model):
    """
    记录每个Release下的完整语法树

    Object{
        path: object所在路径 varchar
        object_id: object名及父类链组成的标识符 varchar
        old_confidence: 旧置信度 float
        confidence: 当前置信度 float
        start_line: 起始行
        end_line: 结束行
        owner_info: 存储 json
        # commit: 外键,隶属于的最新的Commit
    }
    Table: sngapm.diffs_objects
    Constraints: 复合主键(path,object_id,release)
    """

    path = models.CharField(
        max_length=1000, verbose_name="Object's location(path)", db_index=True
    )
    object_id = models.CharField(
        max_length=200, verbose_name="Object's structure chains"
    )
    owner_info = models.JSONField(default=dict, verbose_name="Object owner json list")
    old_confidence = models.FloatField(default=0, verbose_name="Last confidence")
    confidence = models.FloatField(default=0, verbose_name="Current confidence")
    start_line = models.IntegerField(default=0)
    end_line = models.IntegerField(default=0)
    commit = models.ForeignKey(Commit, on_delete=CASCADE, null=True)
    parameters = models.CharField(max_length=10000, default="")

    class Meta:
        db_table = 'diffs_objects'
        constraints = [
            models.UniqueConstraint(
                fields=["path", "object_id", "parameters"],
                name="Release Contains Objects",
            )
        ]
        index_together = ["object_id", "parameters", "path"]

    @classmethod
    def truncate(cls):
        with connection.cursor() as cursor:
            cursor.execute('TRUNCATE TABLE "{0} CASCADE'.format(cls._meta.db_table))

class UnCalculateObjectChange(models.Model):
    """
    记录本次未参与计算的Object
    UncaculateObjectChange{
        hash: Object所属的Commit
        object_id: Object的定义链ID
        old_object_id: Object的旧定义链ID
        parameters: 方法的参数特征
        start_line: 起始行
        end_line: 结束行
        old_line_count: 旧行数
        new_line_count: 新行数
        deleted_line_count: 移除行数
        added_line_count: 新增行数
    }
    """

    parameters = models.CharField(max_length=10000, default="")
    start_line = models.IntegerField(default=0)
    end_line = models.IntegerField(default=0)
    release = models.ForeignKey(
        Release, on_delete=CASCADE, null=True, verbose_name="Object belongs to release"
    )
    # project = models.ForeignKey(Project, on_delete=CASCADE, verbose_name="object belongs to Project")
    commit = models.ForeignKey(
        Commit, on_delete=CASCADE, verbose_name="Object belongs to commit"
    )
    path = models.CharField(max_length=1000)
    hash = models.CharField(max_length=1000)
    object_id = models.CharField(max_length=1000)
    old_object_id = models.CharField(max_length=1000)
    old_line_count = models.IntegerField(default=0)
    current_line_count = models.IntegerField(default=0)
    deleted_line_count = models.IntegerField(default=0)
    added_line_count = models.IntegerField(default=0)

    class Meta:
        db_table = 'diffs_object_change'
        constraints = [
            models.UniqueConstraint(
                name="unique_commit_object_object_Change",
                fields=[
                    "path",
                    "object_id",
                    "hash",
                    "commit",
                    "parameters",
                    "start_line",
                    "end_line",
                ],
            )
        ]

    @classmethod
    def truncate(cls):
        with connection.cursor() as cursor:
            cursor.execute('TRUNCATE TABLE "{0} CASCADE'.format(cls._meta.db_table))
